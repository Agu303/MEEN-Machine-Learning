
import matplotlib.pyplot as plt
import numpy as np

from matplotlib import cm
from matplotlib.ticker import LinearLocator

#1
i = [1,2,3]
x1 = [1,0,0]
x2 = [0,1,0]
y = [0,0,1]
labels = ['i = 1', 'i = 2', 'i = 3']

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(projection='3d')
ax.scatter(x1, x2, y, color='m', marker='o') 
ax.set_xlabel('X1', fontsize=12)
ax.set_ylabel('X2' , fontsize=12)
ax.set_zlabel('Y ', fontsize= 12)
ax.view_init(elev=20, azim=30)

for i, label in enumerate(labels):
    ax.text(x1[i] - 0.1, x2[i], y[i], label, fontsize=10, color='blue') # 0.1 is label offset

plt.subplots_adjust(left=0.2, right=0.8, top=0.8, bottom=0.2)
plt.show()

#3
#vectors
y = np.array([0, 0, 1])
x1 = np.array([1, 0, 0])
x2 = np.array([0, 1, 0])
ones = np.array([1,1,1])
X = np.column_stack([ones, x1, x2])

w2val = np.linspace(-2, 2, 100)

fw2 = [np.linalg.norm(y - X @ np.array([0, 0, w2]))**2 for w2 in w2val]
#print(fw2)


# Partial derivative analytical
partial_derivative = [-2 * (y - X @ np.array([0, 0, w2])) @ (X @ np.array([0, 0, 1])) for w2 in w2val]

# Numerical derivative (central difference)
h = 1e-5
fw2_plus = [np.linalg.norm(y - X @ np.array([0, 0, w2 + h]))**2 for w2 in w2val]
fw2_minus = [np.linalg.norm(y - X @ np.array([0, 0, w2 - h]))**2 for w2 in w2val]
numerical_derivative = [(fw2_plus[i] - fw2_minus[i]) / (2 * h) for i in range(len(w2val))]


plt.figure(figsize=(10, 6))
plt.plot(w2val, fw2, label="$f(w_2)$", color="blue")

plt.plot(w2val, partial_derivative, label="Analytical Derivative $\\frac{\partial f}{\partial w_2}$", color="red", linestyle="--")
plt.plot(w2val, numerical_derivative, label="Numerical Derivative", color="green", linestyle=":")


plt.xlabel("$w2$")
plt.ylabel("$f(w2)$")
plt.title("Plot of $f(w2)$")
plt.grid()
plt.legend()
plt.show()


# 6 Compute the analytical solution for w using the normal equation: w = (X^T * X)^-1 * X^T * y
X_transpose = X.T
w = np.linalg.inv(X_transpose @ X) @ X_transpose @ y
print(w)

#7
fig, ax = plt.subplots(subplot_kw={"projection": "3d"})

x1 = np.arange(-5, 5, 0.25)
x2 = np.arange(-5, 5, 0.25)
x1, x2 = np.meshgrid(x1, x2)
z = w[0] + w[1] * x1 + w[2] * x2

surf = ax.plot_surface(x1, x2, z, cmap=cm.coolwarm, linewidth=0, antialiased=False)

ax.set_zlim(-10, 10)
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter('{x:.01f}')

cbar = fig.colorbar(surf, shrink=0.8, aspect=20, pad=0.1)
cbar.set_label("Model Output h(x)")

ax.set_xlabel("$x_1$")
ax.set_ylabel("$x_2$")
ax.set_zlabel("$h(x)$")
ax.set_title("Linear Regression 3D")

plt.show()

